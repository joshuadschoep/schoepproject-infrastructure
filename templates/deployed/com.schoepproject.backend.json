{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Backend infrastructure for schoepproject.com to handle API calls and email calls",
  "Parameters": {
    "EmailDomainName": {
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9]+\\.)*schoepproject.com",
      "Description": "Name of the domain that is requesting email verification",
      "Default": "schoepproject.com"
    },
    "ApiName": {
      "Type": "String",
      "Description": "Name of the API Gateway instance that will be created",
      "Default": "www-com-schoepproject-api"
    },
    "ApiMappingKey": {
      "Type": "String",
      "Description": "Name of the key that will be used to reach this API",
      "Default": "/www"
    },
    "CodeRepositoryName": {
      "Type": "String",
      "Description": "Name of the container repository to be created for this stack.",
      "Default": "send-email-from-schoepproject-form-data-handler"
    },
    "RepositoryCICDName": {
      "Type": "String",
      "Description": "Name of the role and policy that will be allowed to upload to ECR",
      "Default": "github-Ecr-Schoepproject-Backend-upload-role"
    },
    "LambdaCICDName": {
      "Type": "String",
      "Description": "Name of the role and policy that will be allowed to push images to lambda",
      "Default": "github-Lambda-Schoepproject-Backend-push-role"
    },
    "RepositoryTemplateName": {
      "Type": "String",
      "Description": "Name of the template within this repo that should be used to generate all image repo infrastructure.",
      "Default": "lambda.image.repository.json"
    },
    "AuthorizeExecutionRoleName": {
      "Type": "String",
      "Description": "Name of the policy and service role that will be created for this function",
      "Default": "sendEmailFromSchoepprojectFormData-service-role"
    },
    "EmailHandlerFunctionName": {
      "Type": "String",
      "Description": "Name of the function to be created to handle emailing form posts",
      "Default": "sendEmailFromSchoepprojectFormData"
    },
    "DomainSendingEmails": {
      "Type": "String",
      "Description": "Email address that this stack will grant Lambda permission to send emails to",
      "Default": "schoepproject.com"
    },
    "LambdaCICDTemplateName": {
      "Type": "String",
      "Description": "Name of the template in this repo that should be used to generate CICD roles for Lambda.",
      "Default": "lambda.upload.policy.json"
    },
    "GitRepository": {
      "Type": "String",
      "Description": "Name of the GitHub Repository that will be allowed to access resources",
      "AllowedPattern": "^joshuadschoep/.*$",
      "Default": "joshuadschoep/schoepproject-com-form-handler"
    },
    "GitBranch": {
      "Type": "String",
      "Description": "Name of the GitHub Branch that will be allowed to access resources",
      "Default": "main"
    }
  },
  "Mappings": {
    "Containers": {
      "DefaultGo": {
        "Uri": "145724753995.dkr.ecr.us-east-1.amazonaws.com/schoepproject-go-images:latest"
      }
    },
    "TemplateURLs": {
      "Common": {
        "URL": "https://cloudformation-templates-145724753995-us-east-1.s3.amazonaws.com/common"
      },
      "Deployed": {
        "URL": "https://cloudformation-templates-145724753995-us-east-1.s3.amazonaws.com/deployed"
      }
    }
  },
  "Resources": {
    "EmailDomain": {
      "Type": "AWS::SES::EmailIdentity",
      "Properties": {
        "DkimAttributes": {
          "SigningEnabled": true
        },
        "DkimSigningAttributes": {
          "NextSigningKeyLength": "RSA_2048_BIT"
        },
        "EmailIdentity": {
          "Ref": "EmailDomainName"
        }
      }
    },
    "Api": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": {
          "Ref": "ApiName"
        },
        "ProtocolType": "HTTP",
        "Target": {
          "Fn::GetAtt": ["FormSendFunction", "Arn"]
        },
        "DisableExecuteApiEndpoint": true
      }
    },
    "ApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "StageName": "PROD"
      }
    },
    "ApiMapping": {
      "Type": "AWS::ApiGatewayV2::ApiMapping",
      "Properties": {
        "ApiId": {
          "Ref": "Api"
        },
        "ApiMappingKey": {
          "Ref": "ApiMappingKey"
        },
        "DomainName": {
          "Fn::ImportValue": "com-schoepproject-api-Domain-Name"
        },
        "Stage": {
          "Ref": "ApiStage"
        }
      }
    },
    "ImageRepository": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Fn::FindInMap": ["TemplateURLs", "Common", "URL"]
              },
              {
                "Ref": "RepositoryTemplateName"
              }
            ]
          ]
        },
        "Parameters": {
          "CodeRepositoryName": {
            "Ref": "CodeRepositoryName"
          },
          "RoleAndPolicyName": {
            "Ref": "RepositoryCICDName"
          },
          "GitRepository": {
            "Ref": "GitRepository"
          },
          "GitBranch": {
            "Ref": "GitBranch"
          }
        }
      }
    },
    "LambdaExecutionPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": {
          "Fn::Sub": "Policy to allow ${EmailHandlerFunctionName} to send emails to me"
        },
        "ManagedPolicyName": {
          "Ref": "AuthorizeExecutionRoleName"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowEmailSend",
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail",
                "ses:SendTemplatedEmail"
              ],
              "Resource": [
                "arn:aws:ses:*:145724753995:template/*",
                {
                  "Fn::Sub": "arn:aws:ses:us-east-1:145724753995:identity/${DomainSendingEmails}"
                }
              ]
            }
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": {
          "Fn::Sub": "Role to allow ${EmailHandlerFunctionName} to access S3 objects"
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Ref": "LambdaExecutionPolicy"
          }
        ]
      }
    },
    "FormSendFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::FindInMap": ["Containers", "DefaultGo", "Uri"]
          }
        },
        "FunctionName": {
          "Ref": "EmailHandlerFunctionName"
        },
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        }
      }
    },
    "LambdaCICDRole": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Fn::FindInMap": ["TemplateURLs", "Common", "URL"]
              },
              {
                "Ref": "LambdaCICDTemplateName"
              }
            ]
          ]
        },
        "Parameters": {
          "RoleAndPolicyName": {
            "Ref": "LambdaCICDName"
          },
          "LambdaARN": {
            "Fn::GetAtt": ["FormSendFunction", "Arn"]
          },
          "Repository": {
            "Ref": "GitRepository"
          },
          "Branch": {
            "Ref": "GitBranch"
          }
        }
      }
    }
  },
  "Outputs": {
    "EmailDomain": {
      "Description": "Name of the SES Email Domain that was created for this stack.",
      "Value": {
        "Ref": "EmailDomain"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Email-Domain"
        }
      }
    },
    "ContainerRepositoryName": {
      "Description": "Name of the ECR repository that was created",
      "Value": {
        "Fn::GetAtt": ["ImageRepository", "Outputs.RepositoryName"]
      }
    },
    "ContainerRepositoryUri": {
      "Description": "URI of the ECR repository that was created",
      "Value": {
        "Fn::GetAtt": ["ImageRepository", "Outputs.RepositoryUrl"]
      }
    },
    "ECRUploadRoleArn": {
      "Description": "ARN of the role that GitHub should use to upload to ECR",
      "Value": {
        "Fn::GetAtt": ["ImageRepository", "Outputs.UploadRoleArn"]
      }
    },
    "LambdaName": {
      "Description": "Name of the lambda function that was created",
      "Value": {
        "Ref": "FormSendFunction"
      }
    },
    "LambdaArn": {
      "Description": "ARN of the lambda function that was created",
      "Value": {
        "Fn::GetAtt": ["FormSendFunction", "Arn"]
      }
    },
    "LambdaPushRoleArn": {
      "Description": "Name of the role GitHub should use to push images to Lambda",
      "Value": {
        "Fn::GetAtt": ["LambdaCICDRole", "Outputs.GitHubPrincipalledRoleArn"]
      }
    }
  }
}
